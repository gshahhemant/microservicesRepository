server.port=8080

# create and drop tables and sequences, loads import.sql
#spring.jpa.hibernate.ddl-auto=insert
# H2
spring.h2.console.enabled=true
spring.h2.console.path=/h2
# Datasource
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE
spring.datasource.username=sa
spring.datasource.password=sa
spring.datasource.driver-class-name=org.h2.Driver

# Logging kevel  ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF. A log request of level p in a logger with level q is enabled if q <= p here info enable so it print INFO WARN ERROR FATAL in log 

logging.level.com.microservices= DEBUG
logging.file=mylogfile.log
logging.pattern.file= %d{yyyy-MMM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} - %smg%n
logging.pattern.console= %d{yyyy-MMM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} - %msg%n

# it shows all hibernate-jpa sql in logs so we know how immory table creates tables based on pojo
spring.jpa.show-sql = true


#output to a temp_folder/file
#logging.file=${java.io.tmpdir}/application.log
#output to a file


# Logging pattern for the console
#logging.pattern.console= "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# Logging pattern for file
#logging.pattern.file= "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
#If you don\u2019t like the Spring Boot logging template, just create a standard logback.xml in the root of the resources folder or root of the classpath. This will override the Spring Boot logging template

# it enable all other ends points like metrics which are default sensitive
#management.security.enabled=false

# it is disbale all enpoint inluding info and health
#endpoints.enabled=false
# below is to enable or disable specifiv end point
#endpoints.metrics.enabled=true
#endpoints.metrics.sensitive=false


management.security.enabled=true
security.user.name=hemant
security.user.password=shah
management.security.roles=SUPERUSER

